/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RunnerInitParameters struct {

	// The description of the runner. Max length is 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The last time runner has been seen. Represented as an ISO 8601 timestamp.
	LastSeen *string `json:"lastSeen,omitempty" tf:"last_seen,omitempty"`

	// The name of the runner. Max length is 255 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique User API Token created in Runbook Automation.
	RunbookAPIKeySecretRef *v1.SecretKeySelector `json:"runbookApiKeySecretRef,omitempty" tf:"-"`

	// The subdomain for your Runbook Automation Instance.
	RunbookBaseURI *string `json:"runbookBaseUri,omitempty" tf:"runbook_base_uri,omitempty"`

	// The type of runner. The only allowed values is runbook.
	RunnerType *string `json:"runnerType,omitempty" tf:"runner_type,omitempty"`
}

type RunnerObservation struct {

	// The time runner was created. Represented as an ISO 8601 timestamp.
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// The description of the runner. Max length is 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the runner.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The last time runner has been seen. Represented as an ISO 8601 timestamp.
	LastSeen *string `json:"lastSeen,omitempty" tf:"last_seen,omitempty"`

	// The name of the runner. Max length is 255 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The subdomain for your Runbook Automation Instance.
	RunbookBaseURI *string `json:"runbookBaseUri,omitempty" tf:"runbook_base_uri,omitempty"`

	// The type of runner. The only allowed values is runbook.
	RunnerType *string `json:"runnerType,omitempty" tf:"runner_type,omitempty"`

	// The type of object. The value returned will be runner.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RunnerParameters struct {

	// The description of the runner. Max length is 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The last time runner has been seen. Represented as an ISO 8601 timestamp.
	// +kubebuilder:validation:Optional
	LastSeen *string `json:"lastSeen,omitempty" tf:"last_seen,omitempty"`

	// The name of the runner. Max length is 255 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique User API Token created in Runbook Automation.
	// +kubebuilder:validation:Optional
	RunbookAPIKeySecretRef *v1.SecretKeySelector `json:"runbookApiKeySecretRef,omitempty" tf:"-"`

	// The subdomain for your Runbook Automation Instance.
	// +kubebuilder:validation:Optional
	RunbookBaseURI *string `json:"runbookBaseUri,omitempty" tf:"runbook_base_uri,omitempty"`

	// The type of runner. The only allowed values is runbook.
	// +kubebuilder:validation:Optional
	RunnerType *string `json:"runnerType,omitempty" tf:"runner_type,omitempty"`
}

// RunnerSpec defines the desired state of Runner
type RunnerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RunnerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RunnerInitParameters `json:"initProvider,omitempty"`
}

// RunnerStatus defines the observed state of Runner.
type RunnerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RunnerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Runner is the Schema for the Runners API. Creates and manages an Automation Actions runner in PagerDuty.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Runner struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.runnerType) || (has(self.initProvider) && has(self.initProvider.runnerType))",message="spec.forProvider.runnerType is a required parameter"
	Spec   RunnerSpec   `json:"spec"`
	Status RunnerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RunnerList contains a list of Runners
type RunnerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Runner `json:"items"`
}

// Repository type metadata.
var (
	Runner_Kind             = "Runner"
	Runner_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Runner_Kind}.String()
	Runner_KindAPIVersion   = Runner_Kind + "." + CRDGroupVersion.String()
	Runner_GroupVersionKind = CRDGroupVersion.WithKind(Runner_Kind)
)

func init() {
	SchemeBuilder.Register(&Runner{}, &RunnerList{})
}
