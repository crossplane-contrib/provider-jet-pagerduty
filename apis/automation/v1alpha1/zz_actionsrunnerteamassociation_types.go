/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsRunnerTeamAssociationInitParameters struct {

	// Id of the runner.
	RunnerID *string `json:"runnerId,omitempty" tf:"runner_id,omitempty"`

	// Id of the team associated with the runner.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

type ActionsRunnerTeamAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Id of the runner.
	RunnerID *string `json:"runnerId,omitempty" tf:"runner_id,omitempty"`

	// Id of the team associated with the runner.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

type ActionsRunnerTeamAssociationParameters struct {

	// Id of the runner.
	// +kubebuilder:validation:Optional
	RunnerID *string `json:"runnerId,omitempty" tf:"runner_id,omitempty"`

	// Id of the team associated with the runner.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

// ActionsRunnerTeamAssociationSpec defines the desired state of ActionsRunnerTeamAssociation
type ActionsRunnerTeamAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActionsRunnerTeamAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActionsRunnerTeamAssociationInitParameters `json:"initProvider,omitempty"`
}

// ActionsRunnerTeamAssociationStatus defines the observed state of ActionsRunnerTeamAssociation.
type ActionsRunnerTeamAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActionsRunnerTeamAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ActionsRunnerTeamAssociation is the Schema for the ActionsRunnerTeamAssociations API. Creates and manages an Automation Actions runner association with a Team in PagerDuty.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type ActionsRunnerTeamAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.runnerId) || (has(self.initProvider) && has(self.initProvider.runnerId))",message="spec.forProvider.runnerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.teamId) || (has(self.initProvider) && has(self.initProvider.teamId))",message="spec.forProvider.teamId is a required parameter"
	Spec   ActionsRunnerTeamAssociationSpec   `json:"spec"`
	Status ActionsRunnerTeamAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActionsRunnerTeamAssociationList contains a list of ActionsRunnerTeamAssociations
type ActionsRunnerTeamAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActionsRunnerTeamAssociation `json:"items"`
}

// Repository type metadata.
var (
	ActionsRunnerTeamAssociation_Kind             = "ActionsRunnerTeamAssociation"
	ActionsRunnerTeamAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActionsRunnerTeamAssociation_Kind}.String()
	ActionsRunnerTeamAssociation_KindAPIVersion   = ActionsRunnerTeamAssociation_Kind + "." + CRDGroupVersion.String()
	ActionsRunnerTeamAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ActionsRunnerTeamAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ActionsRunnerTeamAssociation{}, &ActionsRunnerTeamAssociationList{})
}
