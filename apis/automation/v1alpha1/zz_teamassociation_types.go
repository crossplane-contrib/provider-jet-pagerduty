/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamAssociationInitParameters struct {

	// Id of the action.
	// +crossplane:generate:reference:type=Action
	// +crossplane:generate:reference:refFieldName=ActionRefs
	// +crossplane:generate:reference:selectorFieldName=ActionSelector
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	// Reference to a Action to populate actionId.
	// +kubebuilder:validation:Optional
	ActionRefs *v1.Reference `json:"actionRefs,omitempty" tf:"-"`

	// Selector for a Action to populate actionId.
	// +kubebuilder:validation:Optional
	ActionSelector *v1.Selector `json:"actionSelector,omitempty" tf:"-"`

	// Id of the team associated to the action.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:refFieldName=TeamRefs
	// +crossplane:generate:reference:selectorFieldName=TeamSelector
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamRefs *v1.Reference `json:"teamRefs,omitempty" tf:"-"`

	// Selector for a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamSelector *v1.Selector `json:"teamSelector,omitempty" tf:"-"`
}

type TeamAssociationObservation struct {

	// Id of the action.
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Id of the team associated to the action.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

type TeamAssociationParameters struct {

	// Id of the action.
	// +crossplane:generate:reference:type=Action
	// +crossplane:generate:reference:refFieldName=ActionRefs
	// +crossplane:generate:reference:selectorFieldName=ActionSelector
	// +kubebuilder:validation:Optional
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	// Reference to a Action to populate actionId.
	// +kubebuilder:validation:Optional
	ActionRefs *v1.Reference `json:"actionRefs,omitempty" tf:"-"`

	// Selector for a Action to populate actionId.
	// +kubebuilder:validation:Optional
	ActionSelector *v1.Selector `json:"actionSelector,omitempty" tf:"-"`

	// Id of the team associated to the action.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:refFieldName=TeamRefs
	// +crossplane:generate:reference:selectorFieldName=TeamSelector
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamRefs *v1.Reference `json:"teamRefs,omitempty" tf:"-"`

	// Selector for a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamSelector *v1.Selector `json:"teamSelector,omitempty" tf:"-"`
}

// TeamAssociationSpec defines the desired state of TeamAssociation
type TeamAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamAssociationInitParameters `json:"initProvider,omitempty"`
}

// TeamAssociationStatus defines the observed state of TeamAssociation.
type TeamAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TeamAssociation is the Schema for the TeamAssociations API. Creates and manages an Automation Actions action association with a Team in PagerDuty.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type TeamAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TeamAssociationSpec   `json:"spec"`
	Status            TeamAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamAssociationList contains a list of TeamAssociations
type TeamAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TeamAssociation `json:"items"`
}

// Repository type metadata.
var (
	TeamAssociation_Kind             = "TeamAssociation"
	TeamAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TeamAssociation_Kind}.String()
	TeamAssociation_KindAPIVersion   = TeamAssociation_Kind + "." + CRDGroupVersion.String()
	TeamAssociation_GroupVersionKind = CRDGroupVersion.WithKind(TeamAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&TeamAssociation{}, &TeamAssociationList{})
}
