/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsInitParameters struct {

	// If true, indicates that the Trigger can only be started by authorized Users. If false (default), any user can start this Trigger. Applicable only to manual-type triggers.
	Restricted *bool `json:"restricted,omitempty" tf:"restricted,omitempty"`

	// The ID of the Team whose members can manually start this Trigger. Required and allowed only if restricted is true.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/team/v1alpha1.Team
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// Selector for a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

type PermissionsObservation struct {

	// If true, indicates that the Trigger can only be started by authorized Users. If false (default), any user can start this Trigger. Applicable only to manual-type triggers.
	Restricted *bool `json:"restricted,omitempty" tf:"restricted,omitempty"`

	// The ID of the Team whose members can manually start this Trigger. Required and allowed only if restricted is true.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

type PermissionsParameters struct {

	// If true, indicates that the Trigger can only be started by authorized Users. If false (default), any user can start this Trigger. Applicable only to manual-type triggers.
	// +kubebuilder:validation:Optional
	Restricted *bool `json:"restricted,omitempty" tf:"restricted,omitempty"`

	// The ID of the Team whose members can manually start this Trigger. Required and allowed only if restricted is true.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/team/v1alpha1.Team
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// Selector for a Team in team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`
}

type WorkflowTriggerInitParameters struct {

	// A PCL condition string which must be satisfied for the trigger to fire.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Indicates who can start this Trigger. Applicable only to manual-type triggers.
	Permissions []PermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// A list of service IDs. Incidents in any of the listed services are eligible to fire this trigger.
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// Set to true if the trigger should be eligible for firing on all services. Only allowed to be true if the services list is not defined or empty.
	SubscribedToAllServices *bool `json:"subscribedToAllServices,omitempty" tf:"subscribed_to_all_services,omitempty"`

	// [Updating causes resource replacement] May be either manual or conditional.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The workflow ID for the workflow to trigger.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/incident/v1alpha1.Workflow
	Workflow *string `json:"workflow,omitempty" tf:"workflow,omitempty"`

	// Reference to a Workflow in incident to populate workflow.
	// +kubebuilder:validation:Optional
	WorkflowRef *v1.Reference `json:"workflowRef,omitempty" tf:"-"`

	// Selector for a Workflow in incident to populate workflow.
	// +kubebuilder:validation:Optional
	WorkflowSelector *v1.Selector `json:"workflowSelector,omitempty" tf:"-"`
}

type WorkflowTriggerObservation struct {

	// A PCL condition string which must be satisfied for the trigger to fire.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// The ID of the incident workflow.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates who can start this Trigger. Applicable only to manual-type triggers.
	Permissions []PermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// A list of service IDs. Incidents in any of the listed services are eligible to fire this trigger.
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// Set to true if the trigger should be eligible for firing on all services. Only allowed to be true if the services list is not defined or empty.
	SubscribedToAllServices *bool `json:"subscribedToAllServices,omitempty" tf:"subscribed_to_all_services,omitempty"`

	// [Updating causes resource replacement] May be either manual or conditional.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The workflow ID for the workflow to trigger.
	Workflow *string `json:"workflow,omitempty" tf:"workflow,omitempty"`
}

type WorkflowTriggerParameters struct {

	// A PCL condition string which must be satisfied for the trigger to fire.
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Indicates who can start this Trigger. Applicable only to manual-type triggers.
	// +kubebuilder:validation:Optional
	Permissions []PermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// A list of service IDs. Incidents in any of the listed services are eligible to fire this trigger.
	// +kubebuilder:validation:Optional
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// Set to true if the trigger should be eligible for firing on all services. Only allowed to be true if the services list is not defined or empty.
	// +kubebuilder:validation:Optional
	SubscribedToAllServices *bool `json:"subscribedToAllServices,omitempty" tf:"subscribed_to_all_services,omitempty"`

	// [Updating causes resource replacement] May be either manual or conditional.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The workflow ID for the workflow to trigger.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/incident/v1alpha1.Workflow
	// +kubebuilder:validation:Optional
	Workflow *string `json:"workflow,omitempty" tf:"workflow,omitempty"`

	// Reference to a Workflow in incident to populate workflow.
	// +kubebuilder:validation:Optional
	WorkflowRef *v1.Reference `json:"workflowRef,omitempty" tf:"-"`

	// Selector for a Workflow in incident to populate workflow.
	// +kubebuilder:validation:Optional
	WorkflowSelector *v1.Selector `json:"workflowSelector,omitempty" tf:"-"`
}

// WorkflowTriggerSpec defines the desired state of WorkflowTrigger
type WorkflowTriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkflowTriggerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkflowTriggerInitParameters `json:"initProvider,omitempty"`
}

// WorkflowTriggerStatus defines the observed state of WorkflowTrigger.
type WorkflowTriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkflowTriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WorkflowTrigger is the Schema for the WorkflowTriggers API. Creates and manages an incident workflow trigger in PagerDuty.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type WorkflowTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscribedToAllServices) || (has(self.initProvider) && has(self.initProvider.subscribedToAllServices))",message="spec.forProvider.subscribedToAllServices is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   WorkflowTriggerSpec   `json:"spec"`
	Status WorkflowTriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkflowTriggerList contains a list of WorkflowTriggers
type WorkflowTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkflowTrigger `json:"items"`
}

// Repository type metadata.
var (
	WorkflowTrigger_Kind             = "WorkflowTrigger"
	WorkflowTrigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkflowTrigger_Kind}.String()
	WorkflowTrigger_KindAPIVersion   = WorkflowTrigger_Kind + "." + CRDGroupVersion.String()
	WorkflowTrigger_GroupVersionKind = CRDGroupVersion.WithKind(WorkflowTrigger_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkflowTrigger{}, &WorkflowTriggerList{})
}
