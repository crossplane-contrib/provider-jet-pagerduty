/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-pagerduty/apis/team/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CustomFieldOption.
func (mg *CustomFieldOption) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Field),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.FieldRefs,
		Selector:     mg.Spec.ForProvider.FieldSelector,
		To: reference.To{
			List:    &CustomFieldList{},
			Managed: &CustomField{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Field")
	}
	mg.Spec.ForProvider.Field = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.FieldRefs = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Field),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.FieldRefs,
		Selector:     mg.Spec.InitProvider.FieldSelector,
		To: reference.To{
			List:    &CustomFieldList{},
			Managed: &CustomField{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Field")
	}
	mg.Spec.InitProvider.Field = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.FieldRefs = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Workflow.
func (mg *Workflow) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Team),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TeamRefs,
		Selector:     mg.Spec.ForProvider.TeamSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Team")
	}
	mg.Spec.ForProvider.Team = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TeamRefs = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Team),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TeamRefs,
		Selector:     mg.Spec.InitProvider.TeamSelector,
		To: reference.To{
			List:    &v1alpha1.TeamList{},
			Managed: &v1alpha1.Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Team")
	}
	mg.Spec.InitProvider.Team = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TeamRefs = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkflowTrigger.
func (mg *WorkflowTrigger) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Permissions[i3].TeamIDRef,
			Selector:     mg.Spec.ForProvider.Permissions[i3].TeamIDSelector,
			To: reference.To{
				List:    &v1alpha1.TeamList{},
				Managed: &v1alpha1.Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Permissions[i3].TeamID")
		}
		mg.Spec.ForProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Permissions[i3].TeamIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Workflow),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.WorkflowRefs,
		Selector:     mg.Spec.ForProvider.WorkflowSelector,
		To: reference.To{
			List:    &WorkflowList{},
			Managed: &Workflow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Workflow")
	}
	mg.Spec.ForProvider.Workflow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkflowRefs = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Permissions); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Permissions[i3].TeamID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Permissions[i3].TeamIDRef,
			Selector:     mg.Spec.InitProvider.Permissions[i3].TeamIDSelector,
			To: reference.To{
				List:    &v1alpha1.TeamList{},
				Managed: &v1alpha1.Team{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Permissions[i3].TeamID")
		}
		mg.Spec.InitProvider.Permissions[i3].TeamID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Permissions[i3].TeamIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Workflow),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.WorkflowRefs,
		Selector:     mg.Spec.InitProvider.WorkflowSelector,
		To: reference.To{
			List:    &WorkflowList{},
			Managed: &Workflow{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Workflow")
	}
	mg.Spec.InitProvider.Workflow = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WorkflowRefs = rsp.ResolvedReference

	return nil
}
