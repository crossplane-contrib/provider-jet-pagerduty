/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WindowObservation struct {

	// The ID of the maintenance window.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WindowParameters struct {

	// A description for the maintenance window.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the start_time.
	// +kubebuilder:validation:Required
	EndTime *string `json:"endTime" tf:"end_time,omitempty"`

	// References to Service in service to populate services.
	// +kubebuilder:validation:Optional
	ServiceRefs []v1.Reference `json:"serviceRefs,omitempty" tf:"-"`

	// Selector for a list of Service in service to populate services.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// A list of service IDs to include in the maintenance window.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/service/v1alpha1.Service
	// +crossplane:generate:reference:refFieldName=ServiceRefs
	// +crossplane:generate:reference:selectorFieldName=ServiceSelector
	// +kubebuilder:validation:Optional
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// The maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time.
	// +kubebuilder:validation:Required
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`
}

// WindowSpec defines the desired state of Window
type WindowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WindowParameters `json:"forProvider"`
}

// WindowStatus defines the observed state of Window.
type WindowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WindowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Window is the Schema for the Windows API. Creates and manages a maintenance window in PagerDuty.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Window struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WindowSpec   `json:"spec"`
	Status            WindowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WindowList contains a list of Windows
type WindowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Window `json:"items"`
}

// Repository type metadata.
var (
	Window_Kind             = "Window"
	Window_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Window_Kind}.String()
	Window_KindAPIVersion   = Window_Kind + "." + CRDGroupVersion.String()
	Window_GroupVersionKind = CRDGroupVersion.WithKind(Window_Kind)
)

func init() {
	SchemeBuilder.Register(&Window{}, &WindowList{})
}
