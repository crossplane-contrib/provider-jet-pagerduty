/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServicenowObservation struct {

	// URL at which the entity is uniquely displayed in the Web app.
	HTMLURL *string `json:"htmlUrl,omitempty" tf:"html_url,omitempty"`

	// The ID of the extension.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServicenowParameters struct {

	// +kubebuilder:validation:Optional
	EndpointURLSecretRef *v1.SecretKeySelector `json:"endpointUrlSecretRef,omitempty" tf:"-"`

	// This is the objects for which the extension applies (An array of service ids).
	// +kubebuilder:validation:Required
	ExtensionObjects []*string `json:"extensionObjects" tf:"extension_objects,omitempty"`

	// This is the schema for this extension.
	// +kubebuilder:validation:Required
	ExtensionSchema *string `json:"extensionSchema" tf:"extension_schema,omitempty"`

	// The name of the service extension.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ServiceNow referer.
	// +kubebuilder:validation:Required
	Referer *string `json:"referer" tf:"referer,omitempty"`

	// The ServiceNow password.
	// +kubebuilder:validation:Required
	SnowPasswordSecretRef v1.SecretKeySelector `json:"snowPasswordSecretRef" tf:"-"`

	// The ServiceNow username.
	// +kubebuilder:validation:Required
	SnowUser *string `json:"snowUser" tf:"snow_user,omitempty"`

	// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier.
	// +kubebuilder:validation:Optional
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`

	// The ServiceNow sync option.
	// +kubebuilder:validation:Required
	SyncOptions *string `json:"syncOptions" tf:"sync_options,omitempty"`

	// Target Webhook URL.
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// The ServiceNow task type, typically incident.
	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ServicenowSpec defines the desired state of Servicenow
type ServicenowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicenowParameters `json:"forProvider"`
}

// ServicenowStatus defines the observed state of Servicenow.
type ServicenowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicenowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Servicenow is the Schema for the Servicenows API. Creates and manages a ServiceNow service extension in PagerDuty.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Servicenow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicenowSpec   `json:"spec"`
	Status            ServicenowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicenowList contains a list of Servicenows
type ServicenowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Servicenow `json:"items"`
}

// Repository type metadata.
var (
	Servicenow_Kind             = "Servicenow"
	Servicenow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Servicenow_Kind}.String()
	Servicenow_KindAPIVersion   = Servicenow_Kind + "." + CRDGroupVersion.String()
	Servicenow_GroupVersionKind = CRDGroupVersion.WithKind(Servicenow_Kind)
)

func init() {
	SchemeBuilder.Register(&Servicenow{}, &ServicenowList{})
}
