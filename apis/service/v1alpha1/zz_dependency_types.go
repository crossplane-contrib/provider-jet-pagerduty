/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DependencyDependencyInitParameters struct {

	// The service that dependents on the supporting service. Dependency dependent service documented below.
	DependentService []DependentServiceInitParameters `json:"dependentService,omitempty" tf:"dependent_service,omitempty"`

	// The service that supports the dependent service. Dependency supporting service documented below.
	SupportingService []SupportingServiceInitParameters `json:"supportingService,omitempty" tf:"supporting_service,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DependencyDependencyObservation struct {

	// The service that dependents on the supporting service. Dependency dependent service documented below.
	DependentService []DependentServiceObservation `json:"dependentService,omitempty" tf:"dependent_service,omitempty"`

	// The service that supports the dependent service. Dependency supporting service documented below.
	SupportingService []SupportingServiceObservation `json:"supportingService,omitempty" tf:"supporting_service,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DependencyDependencyParameters struct {

	// The service that dependents on the supporting service. Dependency dependent service documented below.
	// +kubebuilder:validation:Optional
	DependentService []DependentServiceParameters `json:"dependentService,omitempty" tf:"dependent_service,omitempty"`

	// The service that supports the dependent service. Dependency supporting service documented below.
	// +kubebuilder:validation:Optional
	SupportingService []SupportingServiceParameters `json:"supportingService,omitempty" tf:"supporting_service,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DependencyInitParameters struct {

	// The relationship between the supporting_service and dependent_service. One and only one dependency block must be defined.
	Dependency []DependencyDependencyInitParameters `json:"dependency,omitempty" tf:"dependency,omitempty"`
}

type DependencyObservation struct {

	// The relationship between the supporting_service and dependent_service. One and only one dependency block must be defined.
	Dependency []DependencyDependencyObservation `json:"dependency,omitempty" tf:"dependency,omitempty"`

	// The ID of the service dependency.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DependencyParameters struct {

	// The relationship between the supporting_service and dependent_service. One and only one dependency block must be defined.
	// +kubebuilder:validation:Optional
	Dependency []DependencyDependencyParameters `json:"dependency,omitempty" tf:"dependency,omitempty"`
}

type DependentServiceInitParameters struct {

	// The ID of the service dependency.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DependentServiceObservation struct {

	// The ID of the service dependency.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DependentServiceParameters struct {

	// The ID of the service dependency.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SupportingServiceInitParameters struct {

	// The ID of the service dependency.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SupportingServiceObservation struct {

	// The ID of the service dependency.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SupportingServiceParameters struct {

	// The ID of the service dependency.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Can be business_service,  service, business_service_reference or technical_service_reference.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// DependencySpec defines the desired state of Dependency
type DependencySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DependencyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DependencyInitParameters `json:"initProvider,omitempty"`
}

// DependencyStatus defines the observed state of Dependency.
type DependencyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DependencyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Dependency is the Schema for the Dependencys API. Creates and manages a business service dependency in PagerDuty.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Dependency struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DependencySpec   `json:"spec"`
	Status            DependencyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DependencyList contains a list of Dependencys
type DependencyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Dependency `json:"items"`
}

// Repository type metadata.
var (
	Dependency_Kind             = "Dependency"
	Dependency_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Dependency_Kind}.String()
	Dependency_KindAPIVersion   = Dependency_Kind + "." + CRDGroupVersion.String()
	Dependency_GroupVersionKind = CRDGroupVersion.WithKind(Dependency_Kind)
)

func init() {
	SchemeBuilder.Register(&Dependency{}, &DependencyList{})
}
