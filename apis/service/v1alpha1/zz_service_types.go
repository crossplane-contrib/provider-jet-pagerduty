/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertGroupingParametersObservation struct {
}

type AlertGroupingParametersParameters struct {

	// Alert grouping parameters dependent on type. If type is set to intelligent or empty then config can be empty.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// The type of alert grouping; one of intelligent, time or content_based.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AtObservation struct {
}

type AtParameters struct {

	// The name of the service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of support hours. Can be fixed_time_per_day.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AutoPauseNotificationsParametersObservation struct {
}

type AutoPauseNotificationsParametersParameters struct {

	// Indicates whether alerts should be automatically suspended when identified as transient.  If not passed in, will default to 'false'.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Indicates in seconds how long alerts should be suspended before triggering. Allowed values: 120, 180, 300, 600, 900 if enabled is true. Must be omitted or set to null if enabled is false.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ConfigObservation struct {
}

type ConfigParameters struct {

	// One of any or all. This setting applies only when type is set to content_based. Group alerts based on one or all of fields value(s).
	// +kubebuilder:validation:Optional
	Aggregate *string `json:"aggregate,omitempty" tf:"aggregate,omitempty"`

	// Alerts will be grouped together if the content of these fields match. This setting applies only when type is set to content_based.
	// +kubebuilder:validation:Optional
	Fields []*string `json:"fields,omitempty" tf:"fields,omitempty"`

	// The duration in minutes within which to automatically group incoming alerts. This setting applies only when type is set to time. To continue grouping alerts until the incident is resolved, set this value to 0.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type DuringSupportHoursObservation struct {
}

type DuringSupportHoursParameters struct {

	// The type of support hours. Can be fixed_time_per_day.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The urgency: low Notify responders (does not escalate), high (follows escalation rules) or severity_based Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	// +kubebuilder:validation:Optional
	Urgency *string `json:"urgency,omitempty" tf:"urgency,omitempty"`
}

type IncidentUrgencyRuleObservation struct {
}

type IncidentUrgencyRuleParameters struct {

	// Incidents' urgency during support hours.
	// +kubebuilder:validation:Optional
	DuringSupportHours []DuringSupportHoursParameters `json:"duringSupportHours,omitempty" tf:"during_support_hours,omitempty"`

	// Incidents' urgency outside support hours.
	// +kubebuilder:validation:Optional
	OutsideSupportHours []OutsideSupportHoursParameters `json:"outsideSupportHours,omitempty" tf:"outside_support_hours,omitempty"`

	// The type of incident urgency: constant or use_support_hours (when depending on specific support hours; see support_hours).
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The urgency: low Notify responders (does not escalate), high (follows escalation rules) or severity_based Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	// +kubebuilder:validation:Optional
	Urgency *string `json:"urgency,omitempty" tf:"urgency,omitempty"`
}

type OutsideSupportHoursObservation struct {
}

type OutsideSupportHoursParameters struct {

	// The type of support hours. Can be fixed_time_per_day.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The urgency: low Notify responders (does not escalate), high (follows escalation rules) or severity_based Set's the urgency of the incident based on the severity set by the triggering monitoring tool.
	// +kubebuilder:validation:Optional
	Urgency *string `json:"urgency,omitempty" tf:"urgency,omitempty"`
}

type ScheduledActionsObservation struct {
}

type ScheduledActionsParameters struct {

	// A block representing when the scheduled action will occur.
	// +kubebuilder:validation:Optional
	At []AtParameters `json:"at,omitempty" tf:"at,omitempty"`

	// The urgency to change to: low (does not escalate), or high (follows escalation rules).
	// +kubebuilder:validation:Optional
	ToUrgency *string `json:"toUrgency,omitempty" tf:"to_urgency,omitempty"`

	// The type of support hours. Can be fixed_time_per_day.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServiceObservation struct {

	// Creation timestamp of the service.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// URL at which the entity is uniquely displayed in the Web app.
	HTMLURL *string `json:"htmlUrl,omitempty" tf:"html_url,omitempty"`

	// The ID of the service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Last incident timestamp of the service.
	LastIncidentTimestamp *string `json:"lastIncidentTimestamp,omitempty" tf:"last_incident_timestamp,omitempty"`

	// The status of the service.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The type of scheduled action. Currently, this must be set to urgency_change.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServiceParameters struct {

	// Time in seconds that an incident changes to the Triggered State after being Acknowledged. Disabled if set to the "null" string.  If not passed in, will default to '"1800"'.
	// +kubebuilder:validation:Optional
	AcknowledgementTimeout *string `json:"acknowledgementTimeout,omitempty" tf:"acknowledgement_timeout,omitempty"`

	// Must be one of two values. PagerDuty receives events from your monitoring systems and can then create incidents in different ways. Value "create_incidents" is default: events will create an incident that cannot be merged. Value "create_alerts_and_incidents" is the alternative: events will create an alert and then add it to a new incident, these incidents can be merged. This option is recommended.
	// +kubebuilder:validation:Optional
	AlertCreation *string `json:"alertCreation,omitempty" tf:"alert_creation,omitempty"`

	// (Deprecated) Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident; If value is set to time: All alerts within a specified duration will be grouped into the same incident. This duration is set in the alert_grouping_timeout setting (described below). Available on Standard, Enterprise, and Event Intelligence plans; If value is set to intelligent - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plan. This field is deprecated, use alert_grouping_parameters.type instead,
	// +kubebuilder:validation:Optional
	AlertGrouping *string `json:"alertGrouping,omitempty" tf:"alert_grouping,omitempty"`

	// Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. If not set, each alert will create a separate incident.
	// +kubebuilder:validation:Optional
	AlertGroupingParameters []AlertGroupingParametersParameters `json:"alertGroupingParameters,omitempty" tf:"alert_grouping_parameters,omitempty"`

	// (Deprecated) The duration in minutes within which to automatically group incoming alerts. This setting applies only when alert_grouping is set to time. To continue grouping alerts until the incident is resolved, set this value to 0. This field is deprecated, use alert_grouping_parameters.config.timeout instead,
	// +kubebuilder:validation:Optional
	AlertGroupingTimeout *string `json:"alertGroupingTimeout,omitempty" tf:"alert_grouping_timeout,omitempty"`

	// Defines how alerts on this service are automatically suspended for a period of time before triggering, when identified as likely being transient. Note that automatically pausing notifications is only available on certain plans as mentioned here.
	// +kubebuilder:validation:Optional
	AutoPauseNotificationsParameters []AutoPauseNotificationsParametersParameters `json:"autoPauseNotificationsParameters,omitempty" tf:"auto_pause_notifications_parameters,omitempty"`

	// Time in seconds that an incident is automatically resolved if left open for that long. Disabled if set to the "null" string.
	// +kubebuilder:validation:Optional
	AutoResolveTimeout *string `json:"autoResolveTimeout,omitempty" tf:"auto_resolve_timeout,omitempty"`

	// A human-friendly description of the service.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The escalation policy used by this service.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/escalation/v1alpha1.Policy
	// +kubebuilder:validation:Optional
	EscalationPolicy *string `json:"escalationPolicy,omitempty" tf:"escalation_policy,omitempty"`

	// Reference to a Policy in escalation to populate escalationPolicy.
	// +kubebuilder:validation:Optional
	EscalationPolicyRef *v1.Reference `json:"escalationPolicyRef,omitempty" tf:"-"`

	// Selector for a Policy in escalation to populate escalationPolicy.
	// +kubebuilder:validation:Optional
	EscalationPolicySelector *v1.Selector `json:"escalationPolicySelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IncidentUrgencyRule []IncidentUrgencyRuleParameters `json:"incidentUrgencyRule,omitempty" tf:"incident_urgency_rule,omitempty"`

	// The name of the service.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The response play used by this service.
	// +kubebuilder:validation:Optional
	ResponsePlay *string `json:"responsePlay,omitempty" tf:"response_play,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledActions []ScheduledActionsParameters `json:"scheduledActions,omitempty" tf:"scheduled_actions,omitempty"`

	// +kubebuilder:validation:Optional
	SupportHours []SupportHoursParameters `json:"supportHours,omitempty" tf:"support_hours,omitempty"`
}

type SupportHoursObservation struct {
}

type SupportHoursParameters struct {

	// Array of days of week as integers. 1 to 7, 1 being
	// Monday and 7 being Sunday.
	// +kubebuilder:validation:Optional
	DaysOfWeek []*float64 `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// The support hours' ending time of day.
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The support hours' starting time of day.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The time zone for the support hours.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The type of support hours. Can be fixed_time_per_day.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Service is the Schema for the Services API. Creates and manages a service in PagerDuty.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec"`
	Status            ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
