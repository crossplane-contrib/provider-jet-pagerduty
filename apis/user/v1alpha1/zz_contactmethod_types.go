/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContactMethodObservation struct {
	Blacklisted *bool `json:"blacklisted,omitempty" tf:"blacklisted,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ContactMethodParameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Optional
	CountryCode *float64 `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// +kubebuilder:validation:Required
	Label *string `json:"label" tf:"label,omitempty"`

	// +kubebuilder:validation:Optional
	SendShortEmail *bool `json:"sendShortEmail,omitempty" tf:"send_short_email,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	UserID *string `json:"userId" tf:"user_id,omitempty"`
}

// ContactMethodSpec defines the desired state of ContactMethod
type ContactMethodSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContactMethodParameters `json:"forProvider"`
}

// ContactMethodStatus defines the observed state of ContactMethod.
type ContactMethodStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContactMethodObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContactMethod is the Schema for the ContactMethods API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerdutyjet}
type ContactMethod struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContactMethodSpec   `json:"spec"`
	Status            ContactMethodStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContactMethodList contains a list of ContactMethods
type ContactMethodList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContactMethod `json:"items"`
}

// Repository type metadata.
var (
	ContactMethod_Kind             = "ContactMethod"
	ContactMethod_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContactMethod_Kind}.String()
	ContactMethod_KindAPIVersion   = ContactMethod_Kind + "." + CRDGroupVersion.String()
	ContactMethod_GroupVersionKind = CRDGroupVersion.WithKind(ContactMethod_Kind)
)

func init() {
	SchemeBuilder.Register(&ContactMethod{}, &ContactMethodList{})
}
