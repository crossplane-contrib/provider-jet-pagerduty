/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigInitParameters struct {

	// One of any or all. This setting is only required and applies when type is set to content_based or content_based_intelligent. Group alerts based on one or all of fields value(s).
	Aggregate *string `json:"aggregate,omitempty" tf:"aggregate,omitempty"`

	// Alerts will be grouped together if the content of these fields match. This setting is only required and applies when type is set to content_based or content_based_intelligent.
	// +listType=set
	Fields []*string `json:"fields,omitempty" tf:"fields,omitempty"`

	// The maximum amount of time allowed between Alerts. This setting applies only when type is set to intelligent, content_based, content_based_intelligent. Value must be between 300 and 3600 or exactly 86400 (86400 is supported only for content_based alert grouping). Any Alerts arriving greater than time_window seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours. To use the recommended time window leave this value unset or set it to null.
	TimeWindow *float64 `json:"timeWindow,omitempty" tf:"time_window,omitempty"`

	// The duration in minutes within which to automatically group incoming alerts. This setting is only required and applies when type is set to time. To continue grouping alerts until the incident is resolved leave this value unset or set it to null.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ConfigObservation struct {

	// One of any or all. This setting is only required and applies when type is set to content_based or content_based_intelligent. Group alerts based on one or all of fields value(s).
	Aggregate *string `json:"aggregate,omitempty" tf:"aggregate,omitempty"`

	// Alerts will be grouped together if the content of these fields match. This setting is only required and applies when type is set to content_based or content_based_intelligent.
	// +listType=set
	Fields []*string `json:"fields,omitempty" tf:"fields,omitempty"`

	// The maximum amount of time allowed between Alerts. This setting applies only when type is set to intelligent, content_based, content_based_intelligent. Value must be between 300 and 3600 or exactly 86400 (86400 is supported only for content_based alert grouping). Any Alerts arriving greater than time_window seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours. To use the recommended time window leave this value unset or set it to null.
	TimeWindow *float64 `json:"timeWindow,omitempty" tf:"time_window,omitempty"`

	// The duration in minutes within which to automatically group incoming alerts. This setting is only required and applies when type is set to time. To continue grouping alerts until the incident is resolved leave this value unset or set it to null.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ConfigParameters struct {

	// One of any or all. This setting is only required and applies when type is set to content_based or content_based_intelligent. Group alerts based on one or all of fields value(s).
	// +kubebuilder:validation:Optional
	Aggregate *string `json:"aggregate,omitempty" tf:"aggregate,omitempty"`

	// Alerts will be grouped together if the content of these fields match. This setting is only required and applies when type is set to content_based or content_based_intelligent.
	// +kubebuilder:validation:Optional
	// +listType=set
	Fields []*string `json:"fields,omitempty" tf:"fields,omitempty"`

	// The maximum amount of time allowed between Alerts. This setting applies only when type is set to intelligent, content_based, content_based_intelligent. Value must be between 300 and 3600 or exactly 86400 (86400 is supported only for content_based alert grouping). Any Alerts arriving greater than time_window seconds apart will not be grouped together. This is a rolling time window and is counted from the most recently grouped alert. The window is extended every time a new alert is added to the group, up to 24 hours. To use the recommended time window leave this value unset or set it to null.
	// +kubebuilder:validation:Optional
	TimeWindow *float64 `json:"timeWindow,omitempty" tf:"time_window,omitempty"`

	// The duration in minutes within which to automatically group incoming alerts. This setting is only required and applies when type is set to time. To continue grouping alerts until the incident is resolved leave this value unset or set it to null.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type GroupingSettingInitParameters struct {

	// The set of values used for configuration.
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name for the alert groupig settings.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// References to Service in service to populate services.
	// +kubebuilder:validation:Optional
	ServiceRefs []v1.Reference `json:"serviceRefs,omitempty" tf:"-"`

	// Selector for a list of Service in service to populate services.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/service/v1alpha1.Service
	// +crossplane:generate:reference:refFieldName=ServiceRefs
	// +crossplane:generate:reference:selectorFieldName=ServiceSelector
	// +listType=set
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// The type of alert grouping; one of intelligent, time, content_based or  content_based_intelligent.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GroupingSettingObservation struct {

	// The set of values used for configuration.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the alert grouping setting.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name for the alert groupig settings.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	// +listType=set
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// The type of alert grouping; one of intelligent, time, content_based or  content_based_intelligent.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GroupingSettingParameters struct {

	// The set of values used for configuration.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name for the alert groupig settings.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// References to Service in service to populate services.
	// +kubebuilder:validation:Optional
	ServiceRefs []v1.Reference `json:"serviceRefs,omitempty" tf:"-"`

	// Selector for a list of Service in service to populate services.
	// +kubebuilder:validation:Optional
	ServiceSelector *v1.Selector `json:"serviceSelector,omitempty" tf:"-"`

	// [Updating can cause a resource replacement] The list IDs of services associated to this setting.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/service/v1alpha1.Service
	// +crossplane:generate:reference:refFieldName=ServiceRefs
	// +crossplane:generate:reference:selectorFieldName=ServiceSelector
	// +kubebuilder:validation:Optional
	// +listType=set
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// The type of alert grouping; one of intelligent, time, content_based or  content_based_intelligent.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// GroupingSettingSpec defines the desired state of GroupingSetting
type GroupingSettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupingSettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupingSettingInitParameters `json:"initProvider,omitempty"`
}

// GroupingSettingStatus defines the observed state of GroupingSetting.
type GroupingSettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupingSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupingSetting is the Schema for the GroupingSettings API. Creates and manages an alert grouping setting in PagerDuty.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type GroupingSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   GroupingSettingSpec   `json:"spec"`
	Status GroupingSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupingSettingList contains a list of GroupingSettings
type GroupingSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupingSetting `json:"items"`
}

// Repository type metadata.
var (
	GroupingSetting_Kind             = "GroupingSetting"
	GroupingSetting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupingSetting_Kind}.String()
	GroupingSetting_KindAPIVersion   = GroupingSetting_Kind + "." + CRDGroupVersion.String()
	GroupingSetting_GroupVersionKind = CRDGroupVersion.WithKind(GroupingSetting_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupingSetting{}, &GroupingSettingList{})
}
