/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleInitParameters_2 struct {

	// A list of one or more actions for each rule. Each action within the list is itself a list.
	ActionJSON *string `json:"actionJson,omitempty" tf:"action_json,omitempty"`

	// Contains a list of specific conditions including active-between,scheduled-weekly, and frequency-over. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see Advanced Condition in the PagerDuty API documentation.
	AdvancedConditionJSON *string `json:"advancedConditionJson,omitempty" tf:"advanced_condition_json,omitempty"`

	// Contains a list of conditions. The first field in the list is and or or, followed by a list of operators and values.
	ConditionJSON *string `json:"conditionJson,omitempty" tf:"condition_json,omitempty"`
}

type RuleObservation_2 struct {

	// A list of one or more actions for each rule. Each action within the list is itself a list.
	ActionJSON *string `json:"actionJson,omitempty" tf:"action_json,omitempty"`

	// Contains a list of specific conditions including active-between,scheduled-weekly, and frequency-over. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see Advanced Condition in the PagerDuty API documentation.
	AdvancedConditionJSON *string `json:"advancedConditionJson,omitempty" tf:"advanced_condition_json,omitempty"`

	// A boolean that indicates whether the rule is a catch-all for the account. This field is read-only through the PagerDuty API.
	CatchAll *bool `json:"catchAll,omitempty" tf:"catch_all,omitempty"`

	// Contains a list of conditions. The first field in the list is and or or, followed by a list of operators and values.
	ConditionJSON *string `json:"conditionJson,omitempty" tf:"condition_json,omitempty"`

	// The ID of the event rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RuleParameters_2 struct {

	// A list of one or more actions for each rule. Each action within the list is itself a list.
	// +kubebuilder:validation:Optional
	ActionJSON *string `json:"actionJson,omitempty" tf:"action_json,omitempty"`

	// Contains a list of specific conditions including active-between,scheduled-weekly, and frequency-over. The first element in the list is the label for the condition, followed by a list of values for the specific condition. For more details on these conditions see Advanced Condition in the PagerDuty API documentation.
	// +kubebuilder:validation:Optional
	AdvancedConditionJSON *string `json:"advancedConditionJson,omitempty" tf:"advanced_condition_json,omitempty"`

	// Contains a list of conditions. The first field in the list is and or or, followed by a list of operators and values.
	// +kubebuilder:validation:Optional
	ConditionJSON *string `json:"conditionJson,omitempty" tf:"condition_json,omitempty"`
}

// RuleSpec defines the desired state of Rule
type RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RuleInitParameters_2 `json:"initProvider,omitempty"`
}

// RuleStatus defines the observed state of Rule.
type RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Rule is the Schema for the Rules API. Creates and manages an event rule in PagerDuty.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actionJson) || (has(self.initProvider) && has(self.initProvider.actionJson))",message="spec.forProvider.actionJson is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.conditionJson) || (has(self.initProvider) && has(self.initProvider.conditionJson))",message="spec.forProvider.conditionJson is a required parameter"
	Spec   RuleSpec   `json:"spec"`
	Status RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleList contains a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

// Repository type metadata.
var (
	Rule_Kind             = "Rule"
	Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rule_Kind}.String()
	Rule_KindAPIVersion   = Rule_Kind + "." + CRDGroupVersion.String()
	Rule_GroupVersionKind = CRDGroupVersion.WithKind(Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}
