/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EscalationRuleObservation struct {
}

type EscalationRuleParameters struct {

	// +kubebuilder:validation:Required
	EscalationDelayInMinutes *float64 `json:"escalationDelayInMinutes" tf:"escalation_delay_in_minutes,omitempty"`

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Target []TargetParameters `json:"target" tf:"target,omitempty"`
}

type PlayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PlayParameters struct {

	// +kubebuilder:validation:Optional
	ConferenceNumber *string `json:"conferenceNumber,omitempty" tf:"conference_number,omitempty"`

	// +kubebuilder:validation:Optional
	ConferenceURL *string `json:"conferenceUrl,omitempty" tf:"conference_url,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	From *string `json:"from" tf:"from,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Responder []ResponderParameters `json:"responder,omitempty" tf:"responder,omitempty"`

	// +kubebuilder:validation:Optional
	RespondersMessage *string `json:"respondersMessage,omitempty" tf:"responders_message,omitempty"`

	// +kubebuilder:validation:Optional
	Runnability *string `json:"runnability,omitempty" tf:"runnability,omitempty"`

	// +kubebuilder:validation:Optional
	Subscriber []SubscriberParameters `json:"subscriber,omitempty" tf:"subscriber,omitempty"`

	// +kubebuilder:validation:Optional
	SubscribersMessage *string `json:"subscribersMessage,omitempty" tf:"subscribers_message,omitempty"`

	// +kubebuilder:validation:Optional
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ResponderObservation struct {
	EscalationRule []EscalationRuleObservation `json:"escalationRule,omitempty" tf:"escalation_rule,omitempty"`

	NumLoops *float64 `json:"numLoops,omitempty" tf:"num_loops,omitempty"`

	OnCallHandoffNotifications *string `json:"onCallHandoffNotifications,omitempty" tf:"on_call_handoff_notifications,omitempty"`

	Service []ServiceObservation `json:"service,omitempty" tf:"service,omitempty"`

	Team []TeamObservation `json:"team,omitempty" tf:"team,omitempty"`
}

type ResponderParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServiceObservation struct {
}

type ServiceParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SubscriberObservation struct {
}

type SubscriberParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TargetObservation struct {
}

type TargetParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type TeamObservation struct {
}

type TeamParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// PlaySpec defines the desired state of Play
type PlaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PlayParameters `json:"forProvider"`
}

// PlayStatus defines the observed state of Play.
type PlayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PlayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Play is the Schema for the Plays API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerdutyjet}
type Play struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PlaySpec   `json:"spec"`
	Status            PlayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlayList contains a list of Plays
type PlayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Play `json:"items"`
}

// Repository type metadata.
var (
	Play_Kind             = "Play"
	Play_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Play_Kind}.String()
	Play_KindAPIVersion   = Play_Kind + "." + CRDGroupVersion.String()
	Play_GroupVersionKind = CRDGroupVersion.WithKind(Play_Kind)
)

func init() {
	SchemeBuilder.Register(&Play{}, &PlayList{})
}
