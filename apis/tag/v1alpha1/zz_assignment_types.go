/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssignmentInitParameters struct {

	// The ID of the entity.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// Type of entity in the tag assignment. Possible values can be users, teams, and escalation_policies.
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// The ID of the tag.
	TagID *string `json:"tagId,omitempty" tf:"tag_id,omitempty"`
}

type AssignmentObservation struct {

	// The ID of the entity.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// Type of entity in the tag assignment. Possible values can be users, teams, and escalation_policies.
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// The ID of the tag assignment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the tag.
	TagID *string `json:"tagId,omitempty" tf:"tag_id,omitempty"`
}

type AssignmentParameters struct {

	// The ID of the entity.
	// +kubebuilder:validation:Optional
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// Type of entity in the tag assignment. Possible values can be users, teams, and escalation_policies.
	// +kubebuilder:validation:Optional
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// The ID of the tag.
	// +kubebuilder:validation:Optional
	TagID *string `json:"tagId,omitempty" tf:"tag_id,omitempty"`
}

// AssignmentSpec defines the desired state of Assignment
type AssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AssignmentInitParameters `json:"initProvider,omitempty"`
}

// AssignmentStatus defines the observed state of Assignment.
type AssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Assignment is the Schema for the Assignments API. Creates and manages a tag assignment in PagerDuty.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Assignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entityId) || (has(self.initProvider) && has(self.initProvider.entityId))",message="spec.forProvider.entityId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entityType) || (has(self.initProvider) && has(self.initProvider.entityType))",message="spec.forProvider.entityType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tagId) || (has(self.initProvider) && has(self.initProvider.tagId))",message="spec.forProvider.tagId is a required parameter"
	Spec   AssignmentSpec   `json:"spec"`
	Status AssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssignmentList contains a list of Assignments
type AssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Assignment `json:"items"`
}

// Repository type metadata.
var (
	Assignment_Kind             = "Assignment"
	Assignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Assignment_Kind}.String()
	Assignment_KindAPIVersion   = Assignment_Kind + "." + CRDGroupVersion.String()
	Assignment_GroupVersionKind = CRDGroupVersion.WithKind(Assignment_Kind)
)

func init() {
	SchemeBuilder.Register(&Assignment{}, &AssignmentList{})
}
