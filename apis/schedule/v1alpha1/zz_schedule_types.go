/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FinalScheduleObservation struct {

	// The name of the schedule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RenderedCoveragePercentage *string `json:"renderedCoveragePercentage,omitempty" tf:"rendered_coverage_percentage,omitempty"`
}

type FinalScheduleParameters struct {
}

type LayerObservation struct {

	// The ID of the schedule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RenderedCoveragePercentage *string `json:"renderedCoveragePercentage,omitempty" tf:"rendered_coverage_percentage,omitempty"`
}

type LayerParameters struct {

	// The end time of the schedule layer. If not specified, the layer does not end.
	// +kubebuilder:validation:Optional
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// The name of the schedule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A schedule layer restriction block. Restriction blocks documented below.
	// +kubebuilder:validation:Optional
	Restriction []RestrictionParameters `json:"restriction,omitempty" tf:"restriction,omitempty"`

	// The duration of each on-call shift in seconds.
	// +kubebuilder:validation:Required
	RotationTurnLengthSeconds *float64 `json:"rotationTurnLengthSeconds" tf:"rotation_turn_length_seconds,omitempty"`

	// The effective start time of the schedule layer. This can be before the start time of the schedule.
	// +kubebuilder:validation:Required
	RotationVirtualStart *string `json:"rotationVirtualStart" tf:"rotation_virtual_start,omitempty"`

	// The start time of the schedule layer.
	// +kubebuilder:validation:Required
	Start *string `json:"start" tf:"start,omitempty"`

	// References to User in user to populate users.
	// +kubebuilder:validation:Optional
	UserRefs []v1.Reference `json:"userRefs,omitempty" tf:"-"`

	// Selector for a list of User in user to populate users.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`

	// The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/user/v1alpha1.User
	// +crossplane:generate:reference:refFieldName=UserRefs
	// +crossplane:generate:reference:selectorFieldName=UserSelector
	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type RestrictionObservation struct {
}

type RestrictionParameters struct {

	// The duration of the restriction in seconds.
	// +kubebuilder:validation:Required
	DurationSeconds *float64 `json:"durationSeconds" tf:"duration_seconds,omitempty"`

	// Number of the day when restriction starts. From 1 to 7 where 1 is Monday and 7 is Sunday.
	// +kubebuilder:validation:Optional
	StartDayOfWeek *float64 `json:"startDayOfWeek,omitempty" tf:"start_day_of_week,omitempty"`

	// The start time in HH:mm:ss format.
	// +kubebuilder:validation:Required
	StartTimeOfDay *string `json:"startTimeOfDay" tf:"start_time_of_day,omitempty"`

	// Can be daily_restriction or weekly_restriction.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ScheduleObservation struct {
	FinalSchedule []FinalScheduleObservation `json:"finalSchedule,omitempty" tf:"final_schedule,omitempty"`

	// The ID of the schedule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A schedule layer block. Schedule layers documented below.
	// +kubebuilder:validation:Required
	Layer []LayerObservation `json:"layer,omitempty" tf:"layer,omitempty"`
}

type ScheduleParameters struct {

	// The description of the schedule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A schedule layer block. Schedule layers documented below.
	// +kubebuilder:validation:Required
	Layer []LayerParameters `json:"layer" tf:"layer,omitempty"`

	// The name of the schedule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow is passed. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from 2011-06-01T10:00:00Z to 2011-06-01T14:00:00Z:
	// If you don't pass the overflow=true parameter, you will get one schedule entry returned with a start of 2011-06-01T10:00:00Z and end of 2011-06-01T14:00:00Z.
	// If you do pass the overflow parameter, you will get one schedule entry returned with a start of 2011-06-01T00:00:00Z and end of 2011-06-02T00:00:00Z.
	// +kubebuilder:validation:Optional
	Overflow *bool `json:"overflow,omitempty" tf:"overflow,omitempty"`

	// References to Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamRefs []v1.Reference `json:"teamRefs,omitempty" tf:"-"`

	// Selector for a list of Team in team to populate teams.
	// +kubebuilder:validation:Optional
	TeamSelector *v1.Selector `json:"teamSelector,omitempty" tf:"-"`

	// Teams associated with the schedule.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/team/v1alpha1.Team
	// +crossplane:generate:reference:refFieldName=TeamRefs
	// +crossplane:generate:reference:selectorFieldName=TeamSelector
	// +kubebuilder:validation:Optional
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// The time zone of the schedule (e.g. Europe/Berlin).
	// +kubebuilder:validation:Required
	TimeZone *string `json:"timeZone" tf:"time_zone,omitempty"`
}

// ScheduleSpec defines the desired state of Schedule
type ScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScheduleParameters `json:"forProvider"`
}

// ScheduleStatus defines the observed state of Schedule.
type ScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Schedule is the Schema for the Schedules API. Creates and manages a schedule in PagerDuty.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Schedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScheduleSpec   `json:"spec"`
	Status            ScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScheduleList contains a list of Schedules
type ScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Schedule `json:"items"`
}

// Repository type metadata.
var (
	Schedule_Kind             = "Schedule"
	Schedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Schedule_Kind}.String()
	Schedule_KindAPIVersion   = Schedule_Kind + "." + CRDGroupVersion.String()
	Schedule_GroupVersionKind = CRDGroupVersion.WithKind(Schedule_Kind)
)

func init() {
	SchemeBuilder.Register(&Schedule{}, &ScheduleList{})
}
