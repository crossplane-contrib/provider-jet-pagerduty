/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MembershipObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MembershipParameters struct {

	// The role of the user in the team. One of observer, responder, or manager. Defaults to manager.
	// These roles match up to user roles in the following ways:
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The ID of the team in which the user will belong.
	// +crossplane:generate:reference:type=Team
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// Reference to a Team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDRef *v1.Reference `json:"teamIdRef,omitempty" tf:"-"`

	// Selector for a Team to populate teamId.
	// +kubebuilder:validation:Optional
	TeamIDSelector *v1.Selector `json:"teamIdSelector,omitempty" tf:"-"`

	// The ID of the user to add to the team.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-pagerduty/apis/user/v1alpha1.User
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// Reference to a User in user to populate userId.
	// +kubebuilder:validation:Optional
	UserIDRef *v1.Reference `json:"userIdRef,omitempty" tf:"-"`

	// Selector for a User in user to populate userId.
	// +kubebuilder:validation:Optional
	UserIDSelector *v1.Selector `json:"userIdSelector,omitempty" tf:"-"`
}

// MembershipSpec defines the desired state of Membership
type MembershipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MembershipParameters `json:"forProvider"`
}

// MembershipStatus defines the observed state of Membership.
type MembershipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MembershipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Membership is the Schema for the Memberships API. Creates and manages a team membership in PagerDuty.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type Membership struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MembershipSpec   `json:"spec"`
	Status            MembershipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MembershipList contains a list of Memberships
type MembershipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Membership `json:"items"`
}

// Repository type metadata.
var (
	Membership_Kind             = "Membership"
	Membership_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Membership_Kind}.String()
	Membership_KindAPIVersion   = Membership_Kind + "." + CRDGroupVersion.String()
	Membership_GroupVersionKind = CRDGroupVersion.WithKind(Membership_Kind)
)

func init() {
	SchemeBuilder.Register(&Membership{}, &MembershipList{})
}
