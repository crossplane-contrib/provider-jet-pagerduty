/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServicenowObservation struct {
	HTMLURL *string `json:"htmlUrl,omitempty" tf:"html_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServicenowParameters struct {

	// +kubebuilder:validation:Optional
	EndpointURLSecretRef *v1.SecretKeySelector `json:"endpointUrlSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ExtensionObjects []*string `json:"extensionObjects" tf:"extension_objects,omitempty"`

	// +kubebuilder:validation:Required
	ExtensionSchema *string `json:"extensionSchema" tf:"extension_schema,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Referer *string `json:"referer" tf:"referer,omitempty"`

	// +kubebuilder:validation:Required
	SnowPasswordSecretRef v1.SecretKeySelector `json:"snowPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	SnowUser *string `json:"snowUser" tf:"snow_user,omitempty"`

	// +kubebuilder:validation:Optional
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`

	// +kubebuilder:validation:Required
	SyncOptions *string `json:"syncOptions" tf:"sync_options,omitempty"`

	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ServicenowSpec defines the desired state of Servicenow
type ServicenowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicenowParameters `json:"forProvider"`
}

// ServicenowStatus defines the observed state of Servicenow.
type ServicenowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicenowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Servicenow is the Schema for the Servicenows API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerdutyjet}
type Servicenow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicenowSpec   `json:"spec"`
	Status            ServicenowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicenowList contains a list of Servicenows
type ServicenowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Servicenow `json:"items"`
}

// Repository type metadata.
var (
	Servicenow_Kind             = "Servicenow"
	Servicenow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Servicenow_Kind}.String()
	Servicenow_KindAPIVersion   = Servicenow_Kind + "." + CRDGroupVersion.String()
	Servicenow_GroupVersionKind = CRDGroupVersion.WithKind(Servicenow_Kind)
)

func init() {
	SchemeBuilder.Register(&Servicenow{}, &ServicenowList{})
}
