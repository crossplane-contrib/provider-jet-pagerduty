/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSubscriberObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceSubscriberParameters struct {

	// +kubebuilder:validation:Required
	BusinessServiceID *string `json:"businessServiceId" tf:"business_service_id,omitempty"`

	// +kubebuilder:validation:Required
	SubscriberID *string `json:"subscriberId" tf:"subscriber_id,omitempty"`

	// +kubebuilder:validation:Required
	SubscriberType *string `json:"subscriberType" tf:"subscriber_type,omitempty"`
}

// ServiceSubscriberSpec defines the desired state of ServiceSubscriber
type ServiceSubscriberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSubscriberParameters `json:"forProvider"`
}

// ServiceSubscriberStatus defines the observed state of ServiceSubscriber.
type ServiceSubscriberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSubscriberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSubscriber is the Schema for the ServiceSubscribers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerdutyjet}
type ServiceSubscriber struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSubscriberSpec   `json:"spec"`
	Status            ServiceSubscriberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSubscriberList contains a list of ServiceSubscribers
type ServiceSubscriberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSubscriber `json:"items"`
}

// Repository type metadata.
var (
	ServiceSubscriber_Kind             = "ServiceSubscriber"
	ServiceSubscriber_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSubscriber_Kind}.String()
	ServiceSubscriber_KindAPIVersion   = ServiceSubscriber_Kind + "." + CRDGroupVersion.String()
	ServiceSubscriber_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSubscriber_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSubscriber{}, &ServiceSubscriberList{})
}
