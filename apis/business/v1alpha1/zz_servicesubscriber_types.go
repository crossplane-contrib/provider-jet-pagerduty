/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSubscriberObservation struct {

	// The ID of the business service subscriber assignment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceSubscriberParameters struct {

	// The ID of the business service to subscribe to.
	// +crossplane:generate:reference:type=Service
	// +kubebuilder:validation:Optional
	BusinessServiceID *string `json:"businessServiceId,omitempty" tf:"business_service_id,omitempty"`

	// Reference to a Service to populate businessServiceId.
	// +kubebuilder:validation:Optional
	BusinessServiceIDRef *v1.Reference `json:"businessServiceIdRef,omitempty" tf:"-"`

	// Selector for a Service to populate businessServiceId.
	// +kubebuilder:validation:Optional
	BusinessServiceIDSelector *v1.Selector `json:"businessServiceIdSelector,omitempty" tf:"-"`

	// The ID of the subscriber entity.
	// +kubebuilder:validation:Required
	SubscriberID *string `json:"subscriberId" tf:"subscriber_id,omitempty"`

	// Type of subscriber entity in the subscriber assignment. Possible values can be user and team.
	// +kubebuilder:validation:Required
	SubscriberType *string `json:"subscriberType" tf:"subscriber_type,omitempty"`
}

// ServiceSubscriberSpec defines the desired state of ServiceSubscriber
type ServiceSubscriberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSubscriberParameters `json:"forProvider"`
}

// ServiceSubscriberStatus defines the observed state of ServiceSubscriber.
type ServiceSubscriberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSubscriberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSubscriber is the Schema for the ServiceSubscribers API. Creates and manages a business service subscriber in PagerDuty.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,pagerduty}
type ServiceSubscriber struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSubscriberSpec   `json:"spec"`
	Status            ServiceSubscriberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSubscriberList contains a list of ServiceSubscribers
type ServiceSubscriberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSubscriber `json:"items"`
}

// Repository type metadata.
var (
	ServiceSubscriber_Kind             = "ServiceSubscriber"
	ServiceSubscriber_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSubscriber_Kind}.String()
	ServiceSubscriber_KindAPIVersion   = ServiceSubscriber_Kind + "." + CRDGroupVersion.String()
	ServiceSubscriber_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSubscriber_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSubscriber{}, &ServiceSubscriberList{})
}
