/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha11 "github.com/crossplane-contrib/provider-pagerduty/apis/service/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-pagerduty/apis/user/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CloudAccountMappingRule.
func (mg *CloudAccountMappingRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Config[i3].Jira); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Config[i3].Jira[i4].SyncNotesUser),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Config[i3].Jira[i4].UserRefs,
				Selector:     mg.Spec.ForProvider.Config[i3].Jira[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha1.UserList{},
					Managed: &v1alpha1.User{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Config[i3].Jira[i4].SyncNotesUser")
			}
			mg.Spec.ForProvider.Config[i3].Jira[i4].SyncNotesUser = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Config[i3].Jira[i4].UserRefs = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Config); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Config[i3].Service),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Config[i3].ServiceRefs,
			Selector:     mg.Spec.ForProvider.Config[i3].ServiceSelector,
			To: reference.To{
				List:    &v1alpha11.ServiceList{},
				Managed: &v1alpha11.Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Config[i3].Service")
		}
		mg.Spec.ForProvider.Config[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Config[i3].ServiceRefs = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Config); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Config[i3].Jira); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Config[i3].Jira[i4].SyncNotesUser),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Config[i3].Jira[i4].UserRefs,
				Selector:     mg.Spec.InitProvider.Config[i3].Jira[i4].UserSelector,
				To: reference.To{
					List:    &v1alpha1.UserList{},
					Managed: &v1alpha1.User{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Config[i3].Jira[i4].SyncNotesUser")
			}
			mg.Spec.InitProvider.Config[i3].Jira[i4].SyncNotesUser = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Config[i3].Jira[i4].UserRefs = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Config); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Config[i3].Service),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Config[i3].ServiceRefs,
			Selector:     mg.Spec.InitProvider.Config[i3].ServiceSelector,
			To: reference.To{
				List:    &v1alpha11.ServiceList{},
				Managed: &v1alpha11.Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Config[i3].Service")
		}
		mg.Spec.InitProvider.Config[i3].Service = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Config[i3].ServiceRefs = rsp.ResolvedReference

	}

	return nil
}
