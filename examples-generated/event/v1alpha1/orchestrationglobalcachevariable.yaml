apiVersion: event.pagerduty.crossplane.io/v1alpha1
kind: OrchestrationGlobalCacheVariable
metadata:
  annotations:
    meta.upbound.io/example-id: event/v1alpha1/orchestrationglobalcachevariable
  labels:
    testing.upbound.io/example-name: cache_var
  name: cache-var
spec:
  forProvider:
    condition:
    - expression: event.source exists
    configuration:
    - regex: .*
      source: event.source
      type: recent_value
    eventOrchestration: ${pagerduty_event_orchestration.event_orchestration.id}
    name: recent_host

---

apiVersion: event.pagerduty.crossplane.io/v1alpha1
kind: Orchestration
metadata:
  annotations:
    meta.upbound.io/example-id: event/v1alpha1/orchestrationglobalcachevariable
  labels:
    testing.upbound.io/example-name: event_orchestration
  name: event-orchestration
spec:
  forProvider:
    name: Example Orchestration
    teamSelector:
      matchLabels:
        testing.upbound.io/example-name: database_team

---

apiVersion: event.pagerduty.crossplane.io/v1alpha1
kind: OrchestrationGlobal
metadata:
  annotations:
    meta.upbound.io/example-id: event/v1alpha1/orchestrationglobalcachevariable
  labels:
    testing.upbound.io/example-name: global
  name: global
spec:
  forProvider:
    catchAll:
    - actions:
      - {}
    eventOrchestration: ${pagerduty_event_orchestration.event_orchestration.id}
    set:
    - id: start
      rule:
      - actions:
        - annotate: 'Last time, we saw this incident occur on host: {{cache_var.recent_host}}'
        label: Always annotate the incident with the event source for all events

---

apiVersion: team.pagerduty.crossplane.io/v1alpha1
kind: Team
metadata:
  annotations:
    meta.upbound.io/example-id: event/v1alpha1/orchestrationglobalcachevariable
  labels:
    testing.upbound.io/example-name: database_team
  name: database-team
spec:
  forProvider:
    name: Database Team
